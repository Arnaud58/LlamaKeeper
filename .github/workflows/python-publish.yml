name: Python Package Publication et Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Installer Ollama
      run: |
        curl https://ollama.ai/install.sh | sh
        ollama pull llama2
    
    - name: Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov black mypy
    
    - name: Vérifier le formatage
      run: |
        black --check backend
        mypy backend
    
    - name: Exécuter les tests
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml
    
    - name: Téléverser la couverture de code
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Installer les dépendances de publication
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    
    - name: Construire et publier
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*

  release-notes:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'

    steps:
    - uses: actions/checkout@v3
    
    - name: Générer les notes de release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=$(cat backend/VERSION)
        gh release create v$VERSION \
          --title "LlamaKeeper Backend v$VERSION" \
          --notes-file backend/CHANGELOG.md